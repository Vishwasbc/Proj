Operating System Part

Program 1

#include <stdio.h>
struct process
{
    int pid, bt, wt, tt;
} p[10];
void main()
{
    int bt, i=0, n, awt, att, ttt = 0, twt = 0;
    printf("enter the no of processes\n");
    scanf("%d", &n);
    printf("enter the burst time %d\n", i);
    for (i = 0; i < n; i++)
    {
        scanf("%d", &p[i].bt);
        p[i].pid = i;
    }
    p[0].wt = 0;
    p[0].tt = p[0].bt + p[0].wt;

    for (i = 1; i < n; i++)
    {
        p[i].wt = p[i - 1].wt + p[i - 1].bt;
        p[i].tt = p[i].wt + p[i].bt;
    }

    printf("\n pid \t bt \t wt \t tt \t \n");
    for (i = 0; i < n; i++)
    {
        printf("\n %d \t %d \t %d \t %d \t \n", p[i].pid, p[i].bt, p[i].wt, p[i].tt);
    }
    for (i = 0; i < n; i++)
    {
        twt = p[i].wt + twt;
        ttt = p[i].tt + ttt;
    }
    awt = twt / n;
    att = ttt / n;
    printf("average waiting time =%d\n", awt);
    printf("average turnaround time =%d", att);
}

Program 2

#include <stdio.h>
struct process
{
    int id, bt, wt, tt;
} p[100];
void main()
{
    struct process temp;
    int i, j, n;
    float awt, att;
    printf("enter the no of proces\n");
    scanf("%d", &n);
    printf("enter the burst time\n");
    for (i = 0; i < n; i++)
    {
        scanf("%d", &p[i].bt);
        p[i].id = i;
    }
    for (i = 0; i < n - 1; i++)
        for (j = 0; j < n - 1 - i; j++)
            if (p[j].bt > p[j + 1].bt)
            {
                temp = p[j];
                p[j] = p[j + 1];
                p[j + 1] = temp;
            }
    p[0].wt = 0;
    p[0].tt = p[0].bt;
    for (i = 1; i < n; i++)
    {
        p[i].wt = p[i - 1].wt + p[i - 1].bt;
        p[i].tt = p[i].wt + p[i].bt;
    }
    awt = att = 0;
    for (i = 0; i < n; i++)
    {
        awt = awt + p[i].wt;
        att = att + p[i].tt;
    }
    awt = awt / n;
    att = att / n;
    printf("proc\tbt\twt\ttt\t\n");
    for (i = 0; i < n; i++)
    {
        printf("p[%d]\t%d\t%d\t%d\t\n", p[i].id, p[i].bt, p[i].wt, p[i].tt);
    }
    printf("\naverage waiting time is %f\n", awt);
    printf("\n average turnaround time is %f", att);
}

Program 3

#include <stdio.h>
struct process
{
    int id, bt, wt, tt, rem;
} p[10];
void main()
{
    int i, n, j, count = 0, quan, alot;
    float wtt = 0, ttt = 0;
    printf("enter the no of process\n");
    scanf("%d", &n);
    printf("enter the burst time for processes\n");
    for (i = 0; i < n; i++)
    {
        scanf("%d", &p[i].bt);
        p[i].id = i;
        p[i].wt = 0;
        p[i].rem = p[i].bt;
        p[i].tt = 0;
    }
    printf("enter the quantum time \n");
    scanf("%d", &quan);
    i = 0;
    count = 0;
    printf("-----------------------------------------------------------------\n");

    while (count < n)
    {
        if (p[i].rem > 0)
        {
            if (p[i].rem >= quan)
                alot = quan;
            else
                alot = p[i].rem;

            p[i].rem = p[i].rem - alot;
            p[i].tt = p[i].tt + alot;
            for (j = 0; j < n; j++)
            {
                if (i != j && p[j].rem != 0)
                {
                    p[j].wt = p[j].wt + alot;
                    p[j].tt = p[j].tt + alot;
                }
            }
            if (p[i].rem == 0)
                count = count + 1;
        }
        i = (i + 1) % n;
    }

    for (i = 0; i < n; i++)
    {
        wtt = wtt + p[i].wt;
        ttt = ttt + p[i].tt;
    }
    wtt = wtt / n;
    ttt = ttt / n;
    printf("proc \t bt \t wt \t tt\n");
    for (i = 0; i < n; i++)
    {
        printf("%d\t%d\t%d\t%d\n", p[i].id, p[i].bt, p[i].wt, p[i].tt);
    }
    printf("average wt=%f\n", wtt);
    printf("average tt=%f\n", ttt);
}

Program 4

#include<stdio.h>
  struct segment
{
   int id,size,allocation;
}seg[20];

int m,n;
void firstfit(int pn,int request)
{
   int i,flag=0;
   for(i=0;i<m;i++)
   {
if(request <= seg[i].size && seg[i].allocation==0)
     {
       seg[i].allocation=1;
printf("\nprocess requirement %d is allocated to memory segment  
                  %d\n",request,seg[i].size);
       flag=1;
       break;
     }
    }
      if(flag==0)
printf("process requirement %d is not allocated \n",request);
  }



 void main()
  {
      int i,p[100];
printf("enter the number of memory segments\n");
scanf("%d",&m);
      for(i=0;i<m;i++)
     {
printf("enter the size of the memory segments\n");
scanf("%d",&seg[i].size);
      seg[i].id=i;
      seg[i].allocation=0;
     }
printf("enter the number of process\n");
scanf("%d",&n);
      for(i=0;i<n;i++)
     {
printf("\nenter the request size of process p[%d]",i);
scanf("%d",&p[i]);
firstfit(i,p[i]);
     }
 }


Program 5

#include <stdio.h>
struct segment
{
    int id, size, allocation;
} seg[100];

int m, n, p[100];
void bestfit(int pn, int request)
{
    int i, j, k, flag = 0, small, sid, temp[100];
    for (i = 0, k = 0; i < m; i++)
    {
        if (seg[i].size >= request && seg[i].allocation == 0)
        {
            temp[k] = i;
            k++;
            flag = 1;
        }
    }
    if (flag == 0)
    {
        printf("Request memory %d is not allocated \n", request);
        return;
    }
    small = seg[temp[0]].size;
    sid = temp[0];
    for (j = 1; j < k; j++)
    {
        if (seg[temp[j]].size < small)
        {
            small = seg[temp[j]].size;
            sid = temp[j];
        }
    }
    printf("memory required %d is allocated to %d\n", request, small);
    seg[sid].allocation = 1;
}

void main()
{
    int i;
    printf("enter the no of memory segments\n");
    scanf("%d", &m);
    for (i = 0; i < m; i++)
    {
        printf("enter the memory blocks\n");
        scanf("%d", &seg[i].size);
        seg[i].id = i;
        seg[i].allocation = 0;
    }
    printf("enter the no of processes\n");
    scanf("%d", &n);
    for (i = 0; i < n; i++)
    {
        printf("enter the request size of process \t p[%d]", i);
        scanf("%d", &p[i]);
        bestfit(i, p[i]);
    }
}


Program 6

#include <stdio.h>
int main()
{
    int referenceString[10], pageFaults = 0, m, n, s, pages, frames;
    printf("\nEnter the number of Pages:\t");
    scanf("%d", &pages);
    printf("\nEnter reference string values:\n");
    for(m = 0; m < pages; m++)
    {
        printf("Value No. [%d]:\t", m + 1);
        scanf("%d", &referenceString[m]);
    }
    printf("\n What are the total number of frames:\t");
    {
        scanf("%d", &frames);
    }
    int temp[frames];
    for (m = 0; m < frames; m++)
    {
        temp[m] = -1;
    }
    for (m = 0; m < pages; m++)
    {
        s = 0;
        for (n = 0; n < frames; n++)
        {
            if (referenceString[m] == temp[n])
            {
                s++;
                pageFaults--;
            }
        }
        pageFaults++;
        if ((pageFaults <= frames) && (s == 0))
        {
            temp[m] = referenceString[m];
        }
        else if (s == 0)
        {
            temp[(pageFaults - 1) % frames] = referenceString[m];
        }
        printf("\n");
        for (n = 0; n < frames; n++)
        {
            printf("%d\t", temp[n]);
        }
    }
    printf("\nTotal Page Faults:\t%d\n", pageFaults);
    return 0;
}


Program 7

#include <stdio.h>
int main()
{
    int no_of_frames, no_of_pages, frames[10], pages[30], temp[10], flag1, flag2, flag3, i, j, k, pos, max, faults = 0;
    printf("Enter number of frames: ");
    scanf("%d", &no_of_frames);

    printf("Enter number of pages: ");
    scanf("%d", &no_of_pages);

    printf("Enter page reference string: ");

    for (i = 0; i < no_of_pages; ++i)
    {
        scanf("%d", &pages[i]);
    }

    for (i = 0; i < no_of_frames; ++i)
    {
        frames[i] = -1;
    }

    for (i = 0; i < no_of_pages; ++i)
    {
        flag1 = flag2 = 0;

        for (j = 0; j < no_of_frames; ++j)
        {
            if (frames[j] == pages[i])
            {
                flag1 = flag2 = 1;
                break;
            }
        }

        if (flag1 == 0)
        {
            for (j = 0; j < no_of_frames; ++j)
            {
                if (frames[j] == -1)
                {
                    faults++;
                    frames[j] = pages[i];
                    flag2 = 1;
                    break;
                }
            }
        }

        if (flag2 == 0)
        {
            flag3 = 0;

            for (j = 0; j < no_of_frames; ++j)
            {
                temp[j] = -1;

                for (k = i + 1; k < no_of_pages; ++k)
                {
                    if (frames[j] == pages[k])
                    {
                        temp[j] = k;
                        break;
                    }
                }
            }

            for (j = 0; j < no_of_frames; ++j)
            {
                if (temp[j] == -1)
                {
                    pos = j;
                    flag3 = 1;
                    break;
                }
            }

            if (flag3 == 0)
            {
                max = temp[0];
                pos = 0;

                for (j = 1; j < no_of_frames; ++j)
                {
                    if (temp[j] > max)
                    {
                        max = temp[j];
                        pos = j;
                    }
                }
            }
            frames[pos] = pages[i];
            faults++;
        }

        printf("\n");

        for (j = 0; j < no_of_frames; ++j)
        {
            printf("%d\t", frames[j]);
        }
    }

    printf("\n\nTotal Page Faults = %d", faults);

    return 0;
}


Program 8

#include<stdio.h>
void main()
   {
	int queue[20],n,head,i,j,k,mov=0,max,diff;
	printf("enter the max range of disk : ");
	scanf("%d",&max);
	printf("enter the size of queue request : ");
	scanf("%d",&n);
	printf("enter the queue\n");
	for(i=1;i<=n;i++)
	scanf("%d",&queue[i]);

	printf("enter the initial head position : ");
	scanf("%d",&head);
	queue[0]=head;
	printf("  FROM\t  TO\t\t HEAD MOVEMENTS\n");
	for(j=0;j<=n-1;j++)
	  {
	     diff=abs(queue[j+1]-queue[j]);
	     mov+=diff;
	printf("  %d\t   %d\t\t %d\n",queue[j],queue[j+1],mov);
	  }
	printf("total head movements is %d\n",mov);

   }


Lex And Yacc Part 

Program 1

%{
#include<stdio.h>
int ch=0,wd=0,sp=0,li=0;
%}
%%
[\n] {li++,ch++,wd++;}
[\t\n] {sp++,wd++,ch++;}
[a-z 0-9] {ch++;}
%%
void main()
{
yyin=fopen("t.txt","r");
yylex();
printf("No of words=%d\nNo of Characters=%d\nNo of Spaces=%d\nNo of lines=%d\n",wd,ch,sp,li);
}

Program 2

%{
#include<stdio.h>
int com=0;
%}

%%
"/*"[a-z A-Z 0-9 \n]*"*/" {com++; fprintf(yyout,"");}
%%

int main()
{
printf("Enter a c program\n");
yyout=fopen("output","w");
yylex();
printf("Comment=%d\n",com);
return 0;
}

Program 3

%{
#include<stdio.h>
int op=0,br=0,id=0;
%}

%%
[+] {op++;}
[-] {op++;}
[*] {op++;}
[/] {op++;}
[a-z A-Z 0-9] {id++;}
[(] {br++;}
[)]  {br--;}
%%

int main()
{
printf("Enter an expression\n");
yylex();
printf("Operator=%d\nIdentifier=%d\nBraces=%d\n",op,id,br);
return 0;
}

Program 4

%{
#include<stdio.h>
int s=0;
%}

%%
"and"|"or"|"not"|"neither" {s=1;}
%%

void main()
{
printf("Enter the sentence\n");
yylex();
if(s==1)
printf("Compound\n");
else
printf("Simple\n");
}

Program 5

Lex part

%{
#include"y.tab.h"
%}

%%
[0-9] {return DIG;}
[a-z] {return LET;}
. {return yytext[0];}
\n {return 0;}
%%



Yacc part

%{
#include<stdio.h>
#include<stdlib.h>
%}

%token LET DIG

%%
stmt : id{printf("Valid Identifier\n");}
       ;
id : letter next
   | letter{;}
   ;
next : letter next
     | digit next
     | letter{;}
     | digit{;}
     ;
letter : LET{;}
       ;
digit : DIG{;}
      ;
%%

int main()
{
printf("Enter identifier\n");
yyparse();
}

int yyerror()
{
printf("Not valid\n");
exit(0);
}

Program 6

Lex part

%{
#include"y.tab.h"
extern int yylval;
%}

%%
[0-9]+ {yylval=atoi(yytext); return NUM;}
[\t];
. {return yytext[0];}
\n {return 0;}
%%



Yacc part
%{
#include<stdio.h>
#include<stdlib.h>
%}

%token NUM
%left '+' '-'
%left '*' '/'

%%
stmt : e {printf("Result=%d\n",$1);}
     ;
e : e '+' e {$$=$1+$3;}
  | e '-' e {$$=$1-$3;}
  | e '*' e {$$=$1*$3;}
  | e '/' e {$$=$1/$3;}
  |'(' e ')' {$$=$2;}
  | NUM {$$ = $1;}
%%

int main()
{
printf("Enter the expression\n");
yyparse();
}

int yyerror()
{
printf("Invalid expression\n");
exit(0);
}

Program 7

Lex part

%{
#include"y.tab.h"
%}

%%
a {return A;}
b {return B;}
. {return yytext[0];}
\n {return 0;}
%%


Yacc part
%{
#include<stdio.h>
#include<stdlib.h>
%}

%token A B

%%
str : S \n;
S : A S B
  | ;
%%

int main()
{
printf("Enter the string\n");
yyparse();
printf("Valid\n");
}

int yyerror()
{
printf("Invalid\n");
exit(0);
}

Program 8

Lex part

%{
#include<stdio.h>
#include"y.tab.h"
%}

%%
[a-zA-Z][a-zA-Z0-9]* {return ID;}
[0-9]+ {return NUM;}
. {return yytext[0];}
\n {return 0;}

%%


Yacc part

%{
#include<stdio.h>
#include<stdlib.h>
%}

%token NUM
%token ID
%left '+' '-'
%left '*' '/'

%%
expr : expr '+' expr;
     | expr '-' expr;
     | expr '*' expr;
     | expr '/' expr;
     | '(' expr ')';
     | NUM;
     | ID;
     ;
%%

int main()
{
printf("Enter the expression\n");
yyparse();
printf("Valid\n");
}

int yyerror()
{
printf("Invalid\n");
exit(0);
}


